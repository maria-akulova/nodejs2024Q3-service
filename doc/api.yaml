openapi: 3.0.0
paths:
 /user:
    get:
      operationId: UserController_getAllUsers
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
      tags: &ref_0
        - user
    post:
      operationId: UserController_createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: body does not contain required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UserController_getUserById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: if userId is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with id === userId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_0
    put:
      operationId: UserController_updatePass
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: if request is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: if userId is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: if oldPassword is wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with id === userId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_0
    delete:
      operationId: UserController_deleteUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: if the record is found and deleted
        '400':
          description: if userId is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with id === userId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_0
  /artist:
    get:
      operationId: ArtistController_getAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistDto'
      tags: &ref_1
        - artist
    post:
      operationId: ArtistController_createArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDto'
        '400':
          description: body does not contain required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_1
  /artist/{id}:
    get:
      operationId: ArtistController_getArtistById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: artist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDto'
        '400':
          description: if artist id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with id === artistId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_1
    put:
      operationId: ArtistController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '200':
          description: if request is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDto'
        '400':
          description: if Id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with provided id doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_1
    delete:
      operationId: ArtistController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: if the record is found and deleted
        '400':
          description: if id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with id === artistId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_1
  /track:
    get:
      operationId: TrackController_getAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackDto'
      tags: &ref_2
        - track
    post:
      operationId: TrackController_createArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
        '400':
          description: body does not contain required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_2
  /track/{id}:
    get:
      operationId: TrackController_getArtistById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: track found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
        '400':
          description: if track id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
        '404':
          description: if record with id === trackId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
      tags: *ref_2
    put:
      operationId: TrackController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '200':
          description: if request is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDto'
        '400':
          description: if Id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with provided id doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_2
    delete:
      operationId: TrackController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: if the record is found and deleted
        '400':
          description: if id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with id === trackId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_2
  /album:
    get:
      operationId: AlbumController_getAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumDto'
      tags: &ref_3
        - album
    post:
      operationId: AlbumController_createArtist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDto'
        '400':
          description: body does not contain required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_3
  /album/{id}:
    get:
      operationId: AlbumController_getAlbumById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: album found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDto'
        '400':
          description: if album id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with id === albumId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_3
    put:
      operationId: AlbumController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '200':
          description: if request is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDto'
        '400':
          description: if Id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with provided id doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_3
    delete:
      operationId: AlbumController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: if the record is found and deleted
        '400':
          description: if id is invalid (not uuid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: if record with provided id doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_3
  /favs:
    get:
      operationId: FavoritesController_getAll
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponseDto'
      tags: &ref_4
        - favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '422':
          description: trackId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteTrack
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: if the record is found and deleted
        '400':
          description: ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: ID is not in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_4
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '422':
          description: albumId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteAlbum
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: if the record is found and deleted
        '400':
          description: ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: ID is not in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_4
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '422':
          description: artistId doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_4
    delete:
      operationId: FavoritesController_deleteArtist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: if the record is found and deleted
        '400':
          description: ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: ID is not in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags: *ref_4
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
servers: []
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        version:
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    ErrorDto:
      type: object
      properties:
        statusCode:
          type: number
        message:
          type: string
        error:
          type: string
      required:
        - statusCode
        - message
        - error
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    ArtistDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    TrackDto:
      type: object
      properties:
        albumId:
          type: string
          nullable: true
        artistId:
          type: string
          nullable: true
        id:
          type: string
        name:
          type: string
        duration:
          type: number
      required:
        - albumId
        - artistId
        - id
        - name
        - duration
    CreateTrackDto:
      type: object
      properties:
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        name:
          type: string
        duration:
          type: number
      required:
        - artistId
        - albumId
        - name
        - duration
    AlbumDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties:
        artistId:
          type: string
          nullable: true
        name:
          type: string
        year:
          type: number
      required:
        - artistId
        - name
        - year
    FavoritesResponseDto:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistDto'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/AlbumDto'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/TrackDto'
      required:
        - artists
        - albums
        - tracks